// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../app/generated/prisma"
  previewFeatures = ["driverAdapters", "queryCompiler"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String
  nickname String @unique
  password String?
  googleId String?
  role Role @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tournamentPlayers TournamentPlayer[]

  @@index([email])
}

enum Role {
  USER
  ADMIN
}


model Tournament {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  rounds       Round[]
  players      TournamentPlayer[]
  status       TournamentStatus  @default(REGISTRATION_OPEN)
  name         String
  desiredTableSize Int
}

enum TournamentStatus{
  REGISTRATION_OPEN
  OPEN_ROUND
  FINISHED_ROUND
  TOURNAMENT_FINISHED
}

model Round {
  id           Int        @id @default(autoincrement())
  roundNumber  Int
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  matches      Match[]
  status       RoundStatus  @default(ACTIVE)
}

enum RoundStatus{
  ACTIVE
  FINISHED
}

model Match {
  id            Int      @id @default(autoincrement())
  round         Round    @relation(fields: [roundId], references: [id])
  roundId       Int
  players       TournamentPlayer[]
  matchResults  MatchResult[]
}

model TournamentPlayer {
  id                Int        @id @default(autoincrement())
  activeTournament  Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId      Int
  matches           Match[]
  matchResults      MatchResult[]
  user              User       @relation(fields: [userId], references: [id])
  userId            Int

  @@unique([tournamentId, userId])
  @@index([tournamentId, userId])
}

model MatchResult {
  id        Int     @id @default(autoincrement())
  player    TournamentPlayer  @relation(fields: [playerId], references: [id])
  playerId  Int
  match     Match   @relation(fields: [matchId], references: [id])
  matchId   Int
  points    Float
}